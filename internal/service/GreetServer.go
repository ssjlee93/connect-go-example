package service

import (
	"context"
	"fmt"
	"io"
	"log"
	"strings"
	"sync"
	"time"

	greetv1 "example/gen/greet/v1" // generated by protoc-gen-go

	"connectrpc.com/connect"
)

type GreetServer struct{}

func (s *GreetServer) Greet(
	ctx context.Context,
	req *connect.Request[greetv1.GreetRequest],
) (*connect.Response[greetv1.GreetResponse], error) {
	log.Println("Request headers: ", req.Header())
	res := connect.NewResponse(&greetv1.GreetResponse{
		Greeting: fmt.Sprintf("Hello, %s!", req.Msg.Name),
	})
	res.Header().Set("Greet-Version", "v1")
	return res, nil
}

func (s *GreetServer) ClientGreet(
	ctx context.Context,
	stream *connect.ClientStream[greetv1.GreetRequest],
) (*connect.Response[greetv1.GreetResponse], error) {
	log.Println("ClientGreet")
	log.Println("Request headers: ", stream.RequestHeader())
	var greeting strings.Builder
	for stream.Receive() {
		g := fmt.Sprintf("Hello, %s!\n", stream.Msg().Name)
		if _, err := greeting.WriteString(g); err != nil {
			return nil, connect.NewError(connect.CodeInternal, err)
		}
	}
	if err := stream.Err(); err != nil {
		return nil, connect.NewError(connect.CodeUnknown, err)
	}
	res := connect.NewResponse(&greetv1.GreetResponse{
		Greeting: greeting.String(),
	})
	res.Header().Set("Greet-Version", "v1")
	return res, nil
}

func (s *GreetServer) ServerGreet(
	ctx context.Context,
	req *connect.Request[greetv1.GreetRequest],
	stream *connect.ServerStream[greetv1.GreetResponse]) error {
	log.Println("ServerGreet")
	log.Println("Request headers: ", req.Header())
	sysmsg := (&greetv1.GreetResponse{
		Greeting: fmt.Sprintf("server streams msgs"),
	})
	stream.Send(sysmsg)

	for i := 0; i < 5; i++ {
		res := (&greetv1.GreetResponse{
			Greeting: fmt.Sprintf("Hello, %s! %d", req.Msg.Name, i),
		})
		stream.Send(res)
	}
	return nil
}

func (s *GreetServer) BothGreet(
	ctx context.Context,
	stream *connect.BidiStream[greetv1.GreetRequest, greetv1.GreetResponse]) error {
	log.Println("BothGreet")
	log.Println("Request headers: ", stream.RequestHeader())

	var receivedNames []string
	var mu sync.Mutex

	// Goroutine to receive messages from the client
	go func() {
		for {
			req, err := stream.Receive()
			if err != nil {
				if err == io.EOF {
					log.Println("Client finished sending messages.")
					break
				}
				log.Printf("Failed to receive request: %v", err)
				return
			}
			log.Printf("Received name: %s", req.Name)
			mu.Lock()
			receivedNames = append(receivedNames, req.Name)
			mu.Unlock()
		}
	}()

	// Simulate some processing time after receiving all messages
	<-time.After(time.Second * 2)

	// Create a greeting message based on the received names
	mu.Lock()
	greeting := fmt.Sprintf("Hello to everyone: %v!", receivedNames)
	mu.Unlock()

	// Send the greeting message back to the client
	resp := &greetv1.GreetResponse{Greeting: greeting}
	if err := stream.Send(resp); err != nil {
		log.Printf("Failed to send response: %v", err)
		return err
	}
	log.Printf("Sent greeting: %s", greeting)

	return nil
}
